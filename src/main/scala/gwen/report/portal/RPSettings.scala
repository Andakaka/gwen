/*
 * Copyright 2021 Branko Juric, Brady Wood
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package gwen.report.portal

import RPConfig._

import gwen._

import scala.util.Try

import java.io.File

object RPSettings {

  private val rerun: Boolean = `rp.rerun`
  private val rerunOf: Option[String] = `rp.rerun.of`
  private val rerunFile: File = new File("target/.rp-rerun.properties")

  def init(): Unit = {

    // load all properties (will error if not mandatories not found or any are invalid)
    `rp.endpoint`
    `rp.launch`
    `rp.project`
    `rp.key`
    `rp.rerun`
    `rp.rerun.of`
    `gwen.rp.send.meta`
    `gwen.rp.send.stepDefs`
    `gwen.rp.send.failed.stepDefs`
    `gwen.rp.send.failed.errorTrace`
    `gwen.rp.send.failed.envTrace`
    `gwen.rp.send.failed.hierarchy`
    `gwen.rp.send.failed.errorBlocks`
    `gwen.rp.send.breadcrumbs`
    `gwen.rp.send.tags`
    `gwen.rp.send.annotations`
    `gwen.rp.send.markdownBlocks`
    `gwen.rp.heartbeat`
    `gwen.rp.heartbeat.timeoutSecs`
    `gwen.rp.testCaseId.keys`
    `gwen.rp.send.nodePath`

    // load rerun settings
    if (rerun && rerunOf.isEmpty && rerunFile.exists()) {
      Settings.loadAll(List(rerunFile))
    }
    
  }

  def writeRerunFile(uuid: String): Unit = {
    val content = 
      s"""|
          |# --------------------------------------------
          |# Report Portal Rerun File (generated by Gwen)
          |# --------------------------------------------
          |
          |# ID of last report portal launch. This property is implicitly loaded when 
          |# Gwen is launched with the rp.rerun=true property to facilitate rerun/merge 
          |# of the current execution results into the previous launch in report portal.
          |rp.rerun.of = $uuid
          |""".stripMargin
    rerunFile.writeText(content)
  }

  /* Provides access to the mandatory `rp.endpoint` report portal setting. */
  def `rp.endpoint`: String = Settings.get("rp.endpoint")

  /* Provides access to the mandatory `rp.launch` report portal setting. */
  def `rp.launch`: String = Settings.get("rp.launch")

  /* Provides access to the mandatory `rp.project` report portal setting. */
  def `rp.project`: String = Settings.get("rp.project")

  /* Provides access to the mandatory `rp.uuid` or `rp.api.key` report portal setting. */
  def `rp.key`: String = Settings.getOpt("rp.api.key").getOrElse(Settings.get("rp.uuid"))

  /* Provides access to the optional `rp.rerun` report portal setting. */
  def `rp.rerun`: Boolean = {
    Try {
      Settings.getOpt("rp.rerun").map(_.toBoolean).getOrElse(false)
    } getOrElse {
      Errors.illegalSettingError("rp.rerun", Settings.getOpt("rp.rerun").getOrElse(""), Set(true, false))
    }
  }

  /* Provides access to the optional `rp.rerun.of` report portal setting. */
  def `rp.rerun.of`: Option[String] = Settings.getOpt("rp.rerun.of")

  /**
   * Provides access to the `gwen.rp.send.meta` property setting used to 
   * determine whether or not Meta specs are sent to the Report Portal (default value is `false`). 
   */
  def `gwen.rp.send.meta`: Boolean = {
    Try {
      Settings.getOpt("gwen.rp.send.meta").map(_.toBoolean).getOrElse(false)
    } getOrElse {
      Errors.illegalSettingError("gwen.rp.send.meta", Settings.getOpt("gwen.rp.send.meta").getOrElse(""), Set(true, false))
    }
  }

  /**
   * Provides access to the `gwen.rp.send.stepDefs` property setting used to 
   * determine how step defs are reported. Options include: inlined, nested, or none (default is `none`). 
   */
  def `gwen.rp.send.stepDefs`: StepDefFormat.Value = {
    Try {
      Settings.getOpt("gwen.rp.send.stepDefs").map(StepDefFormat.withName).getOrElse(StepDefFormat.none)
    } getOrElse {
      Errors.illegalSettingError("gwen.rp.send.stepDefs", Settings.getOpt("gwen.rp.send.stepDefs").getOrElse(""), StepDefFormat.values.toSet)
    }
  }

  /**
   * Provides access to the `gwen.rp.send.failed.StepDefs` property setting used to 
   * determine how failed step defs are reported. Options include: inlined, nested, or none (default is `inlined`). 
   * This setting is only honoured only if gwen.rp.stepDefs = none, otherwhise it takes on the 
   * same value as `gwen.rp.send.StepDefs`.
   */
  def `gwen.rp.send.failed.stepDefs`: StepDefFormat.Value = {
    Try {
      Settings.getOpt("gwen.rp.send.failed.stepDefs").map(StepDefFormat.withName).getOrElse(StepDefFormat.inlined)
    } getOrElse {
      Errors.illegalSettingError("gwen.rp.send.failed.stepDefs", Settings.getOpt("gwen.rp.send.failed.stepDefs").getOrElse(""), StepDefFormat.values.toSet)
    }
  }

  /**
   * Provides access to the `gwen.rp.send.failed.errorTrace` property setting used to 
   * determine how error traces are reported. 
   * Options include: inlined, attached, or none (default value is `none`). 
   */
  def `gwen.rp.send.failed.errorTrace`: ErrorReportingMode.Value = {
    Try {
      Settings.getOpt("gwen.rp.send.failed.errorTrace").map(ErrorReportingMode.withName).getOrElse(ErrorReportingMode.none)
    } getOrElse {
      Errors.illegalSettingError("gwen.rp.send.failed.errorTrace", Settings.getOpt("gwen.rp.send.failed.errorTrace").getOrElse(""), ErrorReportingMode.values.toSet)
    }
  }

  /**
   * Provides access to the `gwen.rp.send.failed.envTrace` property setting used to 
   * determine how environment traces are reported. 
   * Options include: inlined, attached, or none (default value is `none`). 
   */
  def `gwen.rp.send.failed.envTrace`: ErrorReportingMode.Value = {
    Try {
      Settings.getOpt("gwen.rp.send.failed.envTrace").map(ErrorReportingMode.withName).getOrElse(ErrorReportingMode.none)
    } getOrElse {
      Errors.illegalSettingError("gwen.rp.send.failed.envTrace", Settings.getOpt("gwen.rp.send.failed.envTrace").getOrElse(""), ErrorReportingMode.values.toSet)
    }
  }

  /**
   * Provides access to the `gwen.rp.send.failed.hierarchy` property setting used to 
   * determine how failed step hierarchies are reported. 
   * Options include: inlined, attached, or none (default value is `inlined`). 
   */
  def `gwen.rp.send.failed.hierarchy`: ErrorReportingMode.Value = {
    Try {
      Settings.getOpt("gwen.rp.send.failed.hierarchy").map(ErrorReportingMode.withName).getOrElse(ErrorReportingMode.inlined)
    } getOrElse {
      Errors.illegalSettingError("gwen.rp.send.failed.hierarchy", Settings.getOpt("gwen.rp.send.failed.hierarchy").getOrElse(""), ErrorReportingMode.values.toSet)
    }
  }

  /**
   * Provides access to the `gwen.rp.send.failed.errorBlocks` property setting used to 
   * determine which step nodes in a failed call chain will have the error message appended 
   * to their descriptions. Options include: all, leaf, or none (default is none).
   */
  def `gwen.rp.send.failed.errorBlocks`: ErrorBlocks.Value = {
    Try {
      Settings.getOpt("gwen.rp.send.failed.errorBlocks").map(ErrorBlocks.withName).getOrElse(ErrorBlocks.none)
    } getOrElse {
      Errors.illegalSettingError("gwen.rp.send.failed.errorBlocks", Settings.getOpt("gwen.rp.send.failed.errorBlocks").getOrElse(""), ErrorBlocks.values.toSet)
    }
  }
  
  /**
   * Provides access to the `gwen.rp.send.breadcrumbs` property setting used to 
   * determine whether to send breadcrumb (feature, rule, scenario, step names) attributes to 
   * report portal. Default is false.
   */
  def `gwen.rp.send.breadcrumbs`: Boolean = {
    Try { 
      Settings.getOpt("gwen.rp.send.breadcrumbs").map(_.toBoolean).getOrElse(false)
    } getOrElse {
      Errors.illegalSettingError("gwen.rp.send.breadcrumbs", Settings.getOpt("gwen.rp.send.breadcrumbs").getOrElse(""), Set(true, false))
    }
  }

  /**
   * Provides access to the `gwen.rp.send.tags` property setting used to 
   * control whether or not to send tags in feature files to report portal. 
   * Default is `true`.
   */
  def `gwen.rp.send.tags`: Boolean = {
    Try {
      Settings.getOpt("gwen.rp.send.tags").map(_.toBoolean).getOrElse(true)
    } getOrElse {
      Errors.illegalSettingError("gwen.rp.send.tags", Settings.getOpt("gwen.rp.send.tags").getOrElse(""), Set(true, false))
    }
  }

  /**
   * Provides access to the `gwen.rp.send.annotations` property setting used to 
   * control whether or not to send annotations in feature files to send to report portal. 
   * Default is `false`.
   */
  def `gwen.rp.send.annotations`: Boolean = {
    Try {
      Settings.getOpt("gwen.rp.send.annotations").map(_.toBoolean).getOrElse(true)
    } getOrElse {
      Errors.illegalSettingError("gwen.rp.send.annotations", Settings.getOpt("gwen.rp.send.annotations").getOrElse(""), Set(true, false))
    }
  }

  /**
   * Provides access to the `gwen.rp.send.markdownBlocks` property setting used to 
   * determine whether or not to surround all markdown content with triple back ticks
   * so that it renedrs verbatim in markdown view. Default is true.
   */
  def `gwen.rp.send.markdownBlocks`: Boolean = {
    Try {
      Settings.getOpt("gwen.rp.send.markdownBlocks").map(_.toBoolean).getOrElse(true)
    } getOrElse {
      Errors.illegalSettingError("gwen.rp.send.markdownBlocks", Settings.getOpt("gwen.rp.send.markdownBlocks").getOrElse(""), Set(true, false))
    }
  }

  /**
   * Provides access to the `gwen.rp.heartbeat` property setting used to determine whether 
   * or not to check report portal connection before the first step of each scenario 
   * executes and fail fast when it goes offline. Default is true (enabled).
   */
  def `gwen.rp.heartbeat`: Boolean = {
    Try {
      Settings.getOpt("gwen.rp.heartbeat").map(_.toBoolean).getOrElse(true)
    } getOrElse {
      Errors.illegalSettingError("gwen.rp.heartbeat", Settings.getOpt("gwen.rp.heartbeat").getOrElse(""), Set(true, false))
    }
  }

  /**
   * Provides access to the `gwen.rp.heartbeat.timeoutSecs` property setting used to timeout 
   * hearbeat requests. Default is 3 seconds. Only honoured if `gwen.rp.heartbeat` is `true`.
   */
  def `gwen.rp.heartbeat.timeoutSecs`: Int = {
    Try {
      Settings.getOpt("gwen.rp.heartbeat.timeoutSecs").map(_.toInt).getOrElse(3)
    } getOrElse {
      Errors.illegalSettingError("gwen.rp.heartbeat.timeoutSecs", Settings.getOpt("gwen.rp.heartbeat.timeoutSecs").getOrElse(""), Set("positive integers"))
    }
  }

  /**
    * Provides access to the `gwen.rp.testCaseId.keys` property setting used to control how
    * test case IDs are generated in report portal. Valid values include `nodePath+params` (default)
    * and `sourceRef+params`, or `auto`.
    *
    * @return
    */
  def `gwen.rp.testCaseId.keys`: TestCaseIdKeys.Value = {
    Try {
      Settings.getOpt("gwen.rp.testCaseId.keys").map(TestCaseIdKeys.withName).getOrElse(TestCaseIdKeys.`nodePath+params`)
    } getOrElse {
      Errors.illegalSettingError("gwen.rp.testCaseId.keys", Settings.getOpt("gwen.rp.testCaseId.keys").getOrElse(""), TestCaseIdKeys.values.toSet)
    }
  }

   /**
   * Provides access to the `gwen.rp.send.nodePath` property setting used to 
   * control whether or not to send nodepaths to the description of leaf nodes.
   * Default is false (don't send). 
   */
  def `gwen.rp.send.nodePath`: Boolean = {
    Try { 
      Settings.getOpt("gwen.rp.send.nodePath").map(_.toBoolean).getOrElse(false)
    } getOrElse {
      Errors.illegalSettingError("gwen.rp.send.nodePath", Settings.getOpt("gwen.rp.send.nodePath").getOrElse(""), Set(true, false))
    }
  }

}
